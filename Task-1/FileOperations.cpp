#include <filesystem>#include <fstream>#include <iostream>#include <unordered_set>#include <regex>namespace fs = std::filesystem;std::vector<std::string> collectAllTextFiles(const std::string& rootDirectory) {    std::vector<std::string> textFiles;    for (const auto& entry : fs::recursive_directory_iterator(rootDirectory)) {        if (entry.is_regular_file() && entry.path().extension() == ".txt") {            textFiles.push_back(fs::absolute(entry.path()).string());        }    }    return textFiles;}std::string loadFileContent(const std::string& filePath) {    std::ifstream fileStream(filePath);    if (!fileStream.is_open()) {        std::cerr << "Failed to open file: " << filePath << std::endl;        return "";    }    std::string content((std::istreambuf_iterator<char>(fileStream)), std::istreambuf_iterator<char>());    return content;}std::vector<std::string> parseRequiredFiles(const std::string& fileContent) {    std::vector<std::string> dependencies;    std::regex requireRegex(R"(require\s*['"]([^'"]+)['"])");    std::smatch matches;    std::string::const_iterator searchStart(fileContent.cbegin());    while (std::regex_search(searchStart, fileContent.cend(), matches, requireRegex)) {        dependencies.push_back(matches[1]);        searchStart = matches.suffix().first;    }    return dependencies;}void mergeFiles(const std::vector<std::string>& files, const std::string& outputFileName) {    std::ofstream outputStream(outputFileName);    if (!outputStream.is_open()) {        std::cerr << "Failed to open output file: " << outputFileName << std::endl;        return;    }    std::unordered_set<std::string> processedFiles;    for (const std::string& filePath : files) {        std::string fullFilePath = filePath;        if (fs::path(fullFilePath).extension() != ".txt") {            fullFilePath += ".txt";        }        if (processedFiles.count(fullFilePath)) {            continue;        }        processedFiles.insert(fullFilePath);        std::ifstream inputStream(fullFilePath);        if (!inputStream.is_open()) {            std::cerr << "Failed to open input file: " << fullFilePath << std::endl;            continue;        }        std::string line;        while (getline(inputStream, line)) {            if (line.find("require '") == std::string::npos) {                outputStream << line << "\n";            }        }    }}